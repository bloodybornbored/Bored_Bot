import os
import json
import tempfile
from flask import Flask, request
from telegram import Update, InputFile
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, filters
)
from utils.logger import log_event
from utils.pdf_generator import generate_pdf
import speech_recognition as sr
from pydub import AudioSegment

TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL")

app = Flask(__name__)
application = Application.builder().token(TOKEN).build()

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Ç—Ä–µ–∫–µ—Ä. –ö–æ–º–∞–Ω–¥—ã: /help")

# /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = """
ü§ñ *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*

üìã *–ó–∞–º–µ—Ç–∫–∏ –∏ –∑–∞–¥–∞—á–∏*
/add [—Ç–µ–∫—Å—Ç] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É  
/training gym [—Ç–µ–∫—Å—Ç] ‚Äî —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –∑–∞–ª–µ  
/training home [—Ç–µ–∫—Å—Ç] ‚Äî –¥–æ–º–∞—à–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞  
/report ‚Äî –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç  
/pdf ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ –≤ PDF

üìö *–ö–Ω–∏–≥–∏*
/booknote [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–∑–∞–º–µ—Ç–∫–∞] ‚Äî –∑–∞–º–µ—Ç–∫–∞ –ø–æ –∫–Ω–∏–≥–µ  
/addbook [–Ω–∞–∑–≤–∞–Ω–∏–µ] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É  
/books ‚Äî —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥  
/bookpdf [–Ω–∞–∑–≤–∞–Ω–∏–µ] ‚Äî PDF –ø–æ –∑–∞–º–µ—Ç–∫–∞–º –∫–Ω–∏–≥–∏

üé¨ *–§–∏–ª—å–º—ã –∏ –∏–≥—Ä—ã*
/filmlog [—Ç–µ–∫—Å—Ç] ‚Äî –∑–∞–º–µ—Ç–∫–∞ –ø–æ —Ñ–∏–ª—å–º—É  
/gamelog [—Ç–µ–∫—Å—Ç] ‚Äî –∑–∞–º–µ—Ç–∫–∞ –ø–æ –∏–≥—Ä–µ

üíä *–î–æ–±–∞–≤–∫–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*
/supplement [—Ç–µ–∫—Å—Ç] ‚Äî –ø—Ä–∏—ë–º –¥–æ–±–∞–≤–∫–∏  
/remind [–≤—Ä–µ–º—è] [—Ç–µ–∫—Å—Ç] ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–ø—Ä–∏–º–µ—Ä: /remind 15:00 –º–∞—Å—Å–∞–∂)  
/dailylog ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

üß† *–î—Ä—É–≥–æ–µ*
/mindmap ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç-–∫–∞—Ä—Ç–∞ (PDF)  
/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
"""
    await update.message.reply_markdown(text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file = await context.bot.get_file(update.message.voice.file_id)
    with tempfile.NamedTemporaryFile(delete=False, suffix=".oga") as temp_oga:
        await file.download_to_drive(temp_oga.name)
        temp_wav = temp_oga.name.replace(".oga", ".wav")
        AudioSegment.from_ogg(temp_oga.name).export(temp_wav, format="wav")

        recognizer = sr.Recognizer()
        with sr.AudioFile(temp_wav) as source:
            audio = recognizer.record(source)
            try:
                text = recognizer.recognize_google(audio, language="ru-RU")
                log_event("voice", text)
                await update.message.reply_text(f"üîä –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
            except:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

# –•–µ–Ω–¥–ª–µ—Ä—ã
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("help", help_command))
application.add_handler(MessageHandler(filters.VOICE, handle_voice))

# Webhook –º–∞—Ä—à—Ä—É—Ç
@app.route(f"/{TOKEN}", methods=["POST"])
def telegram_webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    application.update_queue.put_nowait(update)
    return "ok", 200

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    application.bot.set_webhook(f"{WEBHOOK_URL}/{TOKEN}")
    print("üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    app.run(port=int(os.environ.get("PORT", 10000)), host="0.0.0.0")
