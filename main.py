import os
import sqlite3
from flask import Flask, request
from telegram import Update, InputFile
from telegram.ext import Application, CommandHandler, ContextTypes
from utils.pdf_generator import generate_pdf  # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –∏–∑ –∑–∞–º–µ—Ç–æ–∫
from utils.logger import log_event  # –ª–æ–≥–≥–µ—Ä (–±—É–¥–µ–º —Ä–∞—Å—à–∏—Ä—è—Ç—å)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL")
print(f"\U0001F680 TOKEN: {TOKEN}")
print(f"\U0001F310 WEBHOOK_URL: {WEBHOOK_URL}")

# === Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
app = Flask(__name__)
application = Application.builder().token(TOKEN).build()

# === Webhook ===
@app.route(f"/{TOKEN}", methods=["POST"])
def telegram_webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    application.update_queue.put_nowait(update)
    return "ok", 200

# === SQLite: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã ===
def init_db():
    conn = sqlite3.connect("tracker.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS logs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        type TEXT,
        content TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )''')
    conn.commit()
    conn.close()

init_db()

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ë–î ===
def log_to_db(entry_type, content):
    conn = sqlite3.connect("tracker.db")
    c = conn.cursor()
    c.execute("INSERT INTO logs (type, content) VALUES (?, ?)", (entry_type, content))
    conn.commit()
    conn.close()

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Ç—Ä–µ–∫–µ—Ä. –ö–æ–º–∞–Ω–¥—ã: /help")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("""
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/training [—Ç–µ–∫—Å—Ç] ‚Äî –∑–∞–ø–∏—Å—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
/reading [—Ç–µ–∫—Å—Ç] ‚Äî –∑–∞–º–µ—Ç–∫–∞ –æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–º
/supplements [—Ç–µ–∫—Å—Ç] ‚Äî –¥–æ–±–∞–≤–∫–∏
/report ‚Äî —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç
/pdf ‚Äî PDF —Å –æ—Ç—á—ë—Ç–æ–º
""")

async def training(update: Update, context: ContextTypes.DEFAULT_TYPE):
    entry = ' '.join(context.args)
    log_to_db("training", entry)
    await update.message.reply_text(f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞: {entry}")

async def reading(update: Update, context: ContextTypes.DEFAULT_TYPE):
    entry = ' '.join(context.args)
    log_to_db("reading", entry)
    await update.message.reply_text(f"–ß—Ç–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ: {entry}")

async def supplements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    entry = ' '.join(context.args)
    log_to_db("supplements", entry)
    await update.message.reply_text(f"–î–æ–±–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∞–Ω—ã: {entry}")

async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect("tracker.db")
    c = conn.cursor()
    c.execute("SELECT type, content, timestamp FROM logs ORDER BY timestamp DESC")
    rows = c.fetchall()
    conn.close()
    if not rows:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return
    text = "\n".join([f"[{r[2]}] {r[0].capitalize()}: {r[1]}" for r in rows])
    await update.message.reply_text("üìù –û—Ç—á—ë—Ç:\n" + text)

async def pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file_path = generate_pdf()
    with open(file_path, "rb") as f:
        await update.message.reply_document(InputFile(f, filename="report.pdf"))

# === –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã ===
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("help", help_command))
application.add_handler(CommandHandler("training", training))
application.add_handler(CommandHandler("reading", reading))
application.add_handler(CommandHandler("supplements", supplements))
application.add_handler(CommandHandler("report", report))
application.add_handler(CommandHandler("pdf", pdf))
