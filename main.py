import os
import sqlite3
from flask import Flask, request
from telegram import Update, InputFile, Message
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from utils.pdf_generator import generate_pdf
from utils.logger import log_event
import datetime
import graphviz
import whisper
import tempfile
import ffmpeg

TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL")
print(f"\U0001F680 TOKEN: {TOKEN}")
print(f"\U0001F310 WEBHOOK_URL: {WEBHOOK_URL}")

app = Flask(__name__)
application = Application.builder().token(TOKEN).build()
model = whisper.load_model("base")

@app.route(f"/{TOKEN}", methods=["POST"])
def telegram_webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    application.update_queue.put_nowait(update)
    return "ok", 200

def init_db():
    conn = sqlite3.connect("tracker.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS logs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        type TEXT,
        content TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS books (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT,
        notes TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS reminders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        message TEXT,
        remind_at TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )''')
    conn.commit()
    conn.close()

init_db()

def log_to_db(entry_type, content):
    conn = sqlite3.connect("tracker.db")
    c = conn.cursor()
    c.execute("INSERT INTO logs (type, content) VALUES (?, ?)", (entry_type, content))
    conn.commit()
    conn.close()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Ç—Ä–µ–∫–µ—Ä. –ö–æ–º–∞–Ω–¥—ã: /help")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("""
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/training [—Ç–µ–∫—Å—Ç] ‚Äî –∑–∞–ø–∏—Å—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
/reading [—Ç–µ–∫—Å—Ç] ‚Äî –∑–∞–º–µ—Ç–∫–∞ –æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–º
/supplements [—Ç–µ–∫—Å—Ç] ‚Äî –¥–æ–±–∞–≤–∫–∏
/books [–Ω–∞–∑–≤–∞–Ω–∏–µ] - [–∑–∞–º–µ—Ç–∫–∞] ‚Äî –∑–∞–º–µ—Ç–∫–∞ –ø–æ –∫–Ω–∏–≥–µ
/library ‚Äî —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
/bookmap ‚Äî mind map –ø–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
/deletebook [–Ω–∞–∑–≤–∞–Ω–∏–µ] ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
/remind [–≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM] [—Å–æ–æ–±—â–µ–Ω–∏–µ] ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/report ‚Äî —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç
/pdf ‚Äî PDF —Å –æ—Ç—á—ë—Ç–æ–º
/dailyvoice ‚Äî –≥–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ –¥–Ω—è

üéô –†–∞—Å–ø–æ–∑–Ω–∞—é—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:
- –° —Ñ—Ä–∞–∑–∞–º–∏: "–∫–Ω–∏–≥–∞", "–¥–æ–º–∞—à–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "–∑–∞–ª", "—Ñ–∏–ª—å–º", "–¥–æ–±–∞–≤–∫–∞", "–∑–∞–º–µ—Ç–∫–∞"
""")

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    voice = update.message.voice
    file = await context.bot.get_file(voice.file_id)
    with tempfile.NamedTemporaryFile(delete=False, suffix=".ogg") as ogg_file:
        await file.download_to_drive(ogg_file.name)
        mp3_path = ogg_file.name.replace(".ogg", ".mp3")
        ffmpeg.input(ogg_file.name).output(mp3_path).run(overwrite_output=True, quiet=True)

    result = model.transcribe(mp3_path)
    text = result["text"].strip().lower()

    # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category = "dailyvoice"
    if "–∫–Ω–∏–≥–∞" in text:
        category = "reading"
    elif "–¥–æ–º–∞—à–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" in text:
        category = "home training"
    elif "–∑–∞–ª" in text:
        category = "gym"
    elif "—Ñ–∏–ª—å–º" in text:
        category = "film"
    elif "–¥–æ–±–∞–≤–∫–∞" in text:
        category = "supplements"

    log_to_db(category, text)
    await update.message.reply_text(f"üéô –ì–æ–ª–æ—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ '{category}':\n{text}")

async def dailyvoice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —è –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ –¥–æ–±–∞–≤–ª—é –∫–∞–∫ –∑–∞–º–µ—Ç–∫—É üìù")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (training, reading –∏ —Ç.–¥.) –Ω–µ –º–µ–Ω—è—é—Ç—Å—è ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("help", help_command))
application.add_handler(CommandHandler("training", training))
application.add_handler(CommandHandler("reading", reading))
application.add_handler(CommandHandler("supplements", supplements))
application.add_handler(CommandHandler("books", books))
application.add_handler(CommandHandler("library", library))
application.add_handler(CommandHandler("deletebook", deletebook))
application.add_handler(CommandHandler("bookmap", bookmap))
application.add_handler(CommandHandler("remind", remind))
application.add_handler(CommandHandler("report", report))
application.add_handler(CommandHandler("pdf", pdf))
application.add_handler(CommandHandler("dailyvoice", dailyvoice))
application.add_handler(MessageHandler(filters.VOICE, handle_voice))
